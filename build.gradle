buildscript {
    // 定义动态属性
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    // 自定义hibernate的版本
    ext['hibernate.version'] = '5.2.8.Final'
    // 定义maven的中央仓库
    repositories {
        //mavenCentral()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 定义插件
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group = 'org.meisen.springboot'
version = '1.0.0'
sourceCompatibility = 1.8
// avoid 'Unable to find main class' error

//bootRepackage {
//    enabled = false
//}
// 这个可以避免上面的的错误，但是这两个要配合使用
apply plugin: 'application'
mainClassName='org.springboot.Application'


// 依赖使用的中央仓库
repositories {
    //mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
}

// 项目中的依赖
dependencies {
    compile project(':application')
    compile project(':data')
    compile project(':modules')
    compile("org.springframework.boot:spring-boot-starter")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    // spring data jpa依赖
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    // mysql 依赖
    compile('mysql:mysql-connector-java:6.0.6')
    // 添加 common-logs依赖
    compile('org.apache.commons:commons-lang3:3.5')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}
